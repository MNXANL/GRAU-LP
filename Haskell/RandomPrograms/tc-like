myMap :: (a -> b) -> [a] -> [b] that emulates map using comprehension lists.
Implement a function myFilter :: (a -> Bool) -> [a] -> [a] that emulates filter using comprehension lists.
Implement a function myZipWith :: (a -> b -> c) -> [a] -> [b] -> [c] that emulates zipWith using comprehension lists and zip.
Implement a function thingify :: [Int] -> [Int] -> [(Int, Int)] that, given two lists of integers, returns the list that pairs the elements if the element of the second list divides the one in the first list.
Implement a function factors :: Int -> [Int]
