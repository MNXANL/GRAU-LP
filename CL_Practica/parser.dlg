<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: mountains.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
#include <cstdlib>
#include <cmath>

#include <map>
#include <vector>
using namespace std;

// struct to store information about tokens
typedef struct {
  string kind;
  string text;
} Attrib;

// function to fill token information (predeclaration)
void zzcr_attr(Attrib *attr, int type, char *text);

// fields for AST nodes
#define AST_FIELDS string kind; string text;
#include "ast.h"

// macro to create a new AST node (and function predeclaration)
#define zzcr_ast(as,attr,ttype,textt) as=createASTnode(attr,ttype,textt)
AST* createASTnode(Attrib* attr, int ttype, char *textt);
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = 1;
	>>

Draw
	<<
		NLA = DRAW;
	>>

Height
	<<
		NLA = HEIGHT;
	>>

Match
	<<
		NLA = MATCH;
	>>

Peak
	<<
		NLA = PEAK;
	>>

Valley
	<<
		NLA = VALLEY;
	>>

Complete
	<<
		NLA = COMPLETE;
	>>

Wellformed
	<<
		NLA = WELLFORMED;
	>>

\while
	<<
		NLA = LOOP;
	>>

endwhile
	<<
		NLA = ENDLOOP;
	>>

\if
	<<
		NLA = COND;
	>>

endif
	<<
		NLA = ENDCOND;
	>>

\(
	<<
		NLA = L_PAREN;
	>>

\)
	<<
		NLA = R_PAREN;
	>>

\,
	<<
		NLA = COMMA;
	>>

\;
	<<
		NLA = CONCAT;
	>>

\/
	<<
		NLA = UPHILL;
	>>

\-
	<<
		NLA = SUMMIT;
	>>

\\
	<<
		NLA = DOWNHILL;
	>>

\*
	<<
		NLA = UNIT;
	>>

\<
	<<
		NLA = LT;
	>>

\>
	<<
		NLA = GT;
	>>

\==
	<<
		NLA = EQ;
	>>

AND
	<<
		NLA = AND;
	>>

OR
	<<
		NLA = OR;
	>>

NOT
	<<
		NLA = NOT;
	>>

\+
	<<
		NLA = SUM;
	>>

\#
	<<
		NLA = HASHTAG;
	>>

is
	<<
		NLA = IS;
	>>

[a-zA-Z][0-9]*
	<<
		NLA = ID;
	>>

[0-9]+
	<<
		NLA = NUM;
	>>

[\ \t \n]
	<<
		NLA = SPACE;
    zzskip();   
	>>

%%
